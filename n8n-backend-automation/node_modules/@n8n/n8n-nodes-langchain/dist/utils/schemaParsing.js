"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var schemaParsing_exports = {};
__export(schemaParsing_exports, {
  convertJsonSchemaToZod: () => convertJsonSchemaToZod,
  generateSchema: () => generateSchema,
  throwIfToolSchema: () => throwIfToolSchema
});
module.exports = __toCommonJS(schemaParsing_exports);
var import_json_schema_to_zod = require("@n8n/json-schema-to-zod");
var import_generate_schema = require("generate-schema");
var import_n8n_workflow = require("n8n-workflow");
function generateSchema(schemaString) {
  const parsedSchema = (0, import_n8n_workflow.jsonParse)(schemaString);
  return (0, import_generate_schema.json)(parsedSchema);
}
function convertJsonSchemaToZod(schema) {
  return (0, import_json_schema_to_zod.jsonSchemaToZod)(schema);
}
function throwIfToolSchema(ctx, error) {
  if (error?.message?.includes("tool input did not match expected schema")) {
    throw new import_n8n_workflow.NodeOperationError(
      ctx.getNode(),
      `${error.message}.
			This is most likely because some of your tools are configured to require a specific schema. This is not supported by Conversational Agent. Remove the schema from the tool configuration or use Tools agent instead.`
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  convertJsonSchemaToZod,
  generateSchema,
  throwIfToolSchema
});
//# sourceMappingURL=schemaParsing.js.map