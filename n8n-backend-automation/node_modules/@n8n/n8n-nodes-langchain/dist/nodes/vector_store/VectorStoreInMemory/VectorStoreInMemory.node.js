"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var VectorStoreInMemory_node_exports = {};
__export(VectorStoreInMemory_node_exports, {
  VectorStoreInMemory: () => VectorStoreInMemory
});
module.exports = __toCommonJS(VectorStoreInMemory_node_exports);
var import_createVectorStoreNode = require("../shared/createVectorStoreNode/createVectorStoreNode");
var import_MemoryVectorStoreManager = require("../shared/MemoryManager/MemoryVectorStoreManager");
const insertFields = [
  {
    displayName: '<strong>For experimental use only</strong>: Data is stored in memory and will be lost if n8n restarts. Data may also be cleared if available memory gets low. <a href="https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/">More info</a>',
    name: "notice",
    type: "notice",
    default: ""
  },
  {
    displayName: "Clear Store",
    name: "clearStore",
    type: "boolean",
    default: false,
    description: "Whether to clear the store before inserting new data"
  }
];
class VectorStoreInMemory extends (0, import_createVectorStoreNode.createVectorStoreNode)({
  meta: {
    displayName: "Simple Vector Store",
    name: "vectorStoreInMemory",
    description: "Work with your data in a Simple Vector Store. Don't use this for production usage.",
    icon: "fa:database",
    iconColor: "black",
    docsUrl: "https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/"
  },
  sharedFields: [
    {
      displayName: "Memory Key",
      name: "memoryKey",
      type: "string",
      default: "vector_store_key",
      description: "The key to use to store the vector memory in the workflow data. The key will be prefixed with the workflow ID to avoid collisions."
    }
  ],
  insertFields,
  loadFields: [],
  retrieveFields: [],
  async getVectorStoreClient(context, _filter, embeddings, itemIndex) {
    const workflowId = context.getWorkflow().id;
    const memoryKey = context.getNodeParameter("memoryKey", itemIndex);
    const vectorStoreSingleton = import_MemoryVectorStoreManager.MemoryVectorStoreManager.getInstance(embeddings, context.logger);
    return await vectorStoreSingleton.getVectorStore(`${workflowId}__${memoryKey}`);
  },
  async populateVectorStore(context, embeddings, documents, itemIndex) {
    const memoryKey = context.getNodeParameter("memoryKey", itemIndex);
    const clearStore = context.getNodeParameter("clearStore", itemIndex);
    const workflowId = context.getWorkflow().id;
    const vectorStoreInstance = import_MemoryVectorStoreManager.MemoryVectorStoreManager.getInstance(embeddings, context.logger);
    await vectorStoreInstance.addDocuments(`${workflowId}__${memoryKey}`, documents, clearStore);
  }
}) {
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  VectorStoreInMemory
});
//# sourceMappingURL=VectorStoreInMemory.node.js.map