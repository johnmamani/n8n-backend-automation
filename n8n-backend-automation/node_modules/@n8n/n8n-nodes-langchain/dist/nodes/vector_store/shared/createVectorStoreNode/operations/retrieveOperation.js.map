{"version":3,"sources":["../../../../../../nodes/vector_store/shared/createVectorStoreNode/operations/retrieveOperation.ts"],"sourcesContent":["import type { Embeddings } from '@langchain/core/embeddings';\nimport type { VectorStore } from '@langchain/core/vectorstores';\nimport type { ISupplyDataFunctions, SupplyData } from 'n8n-workflow';\n\nimport { getMetadataFiltersValues } from '@utils/helpers';\nimport { logWrapper } from '@utils/logWrapper';\n\nimport type { VectorStoreNodeConstructorArgs } from '../types';\n\n/**\n * Handles the 'retrieve' operation mode\n * Returns the vector store to be used with AI nodes\n */\nexport async function handleRetrieveOperation<T extends VectorStore = VectorStore>(\n\tcontext: ISupplyDataFunctions,\n\targs: VectorStoreNodeConstructorArgs<T>,\n\tembeddings: Embeddings,\n\titemIndex: number,\n): Promise<SupplyData> {\n\t// Get metadata filters\n\tconst filter = getMetadataFiltersValues(context, itemIndex);\n\n\t// Get the vector store client\n\tconst vectorStore = await args.getVectorStoreClient(context, filter, embeddings, itemIndex);\n\n\t// Return the vector store with logging wrapper and cleanup function\n\treturn {\n\t\tresponse: logWrapper(vectorStore, context),\n\t\tcloseFunction: async () => {\n\t\t\t// Release the vector store client if a release method was provided\n\t\t\targs.releaseVectorStoreClient?.(vectorStore);\n\t\t},\n\t};\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qBAAyC;AACzC,wBAA2B;AAQ3B,eAAsB,wBACrB,SACA,MACA,YACA,WACsB;AAEtB,QAAM,aAAS,yCAAyB,SAAS,SAAS;AAG1D,QAAM,cAAc,MAAM,KAAK,qBAAqB,SAAS,QAAQ,YAAY,SAAS;AAG1F,SAAO;AAAA,IACN,cAAU,8BAAW,aAAa,OAAO;AAAA,IACzC,eAAe,YAAY;AAE1B,WAAK,2BAA2B,WAAW;AAAA,IAC5C;AAAA,EACD;AACD;","names":[]}