"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var OutputParserStructured_node_exports = {};
__export(OutputParserStructured_node_exports, {
  OutputParserStructured: () => OutputParserStructured
});
module.exports = __toCommonJS(OutputParserStructured_node_exports);
var import_n8n_workflow = require("n8n-workflow");
var import_descriptions = require("../../../utils/descriptions");
var import_N8nOutputParser = require("../../../utils/output_parsers/N8nOutputParser");
var import_schemaParsing = require("../../../utils/schemaParsing");
var import_sharedFields = require("../../../utils/sharedFields");
class OutputParserStructured {
  constructor() {
    this.description = {
      displayName: "Structured Output Parser",
      name: "outputParserStructured",
      icon: "fa:code",
      iconColor: "black",
      group: ["transform"],
      version: [1, 1.1, 1.2],
      defaultVersion: 1.2,
      description: "Return data in a defined JSON format",
      defaults: {
        name: "Structured Output Parser"
      },
      codex: {
        alias: ["json", "zod"],
        categories: ["AI"],
        subcategories: {
          AI: ["Output Parsers"]
        },
        resources: {
          primaryDocumentation: [
            {
              url: "https://docs.n8n.io/integrations/builtin/cluster-nodes/sub-nodes/n8n-nodes-langchain.outputparserstructured/"
            }
          ]
        }
      },
      // eslint-disable-next-line n8n-nodes-base/node-class-description-inputs-wrong-regular-node
      inputs: [],
      // eslint-disable-next-line n8n-nodes-base/node-class-description-outputs-wrong
      outputs: [import_n8n_workflow.NodeConnectionTypes.AiOutputParser],
      outputNames: ["Output Parser"],
      properties: [
        (0, import_sharedFields.getConnectionHintNoticeField)([import_n8n_workflow.NodeConnectionTypes.AiChain, import_n8n_workflow.NodeConnectionTypes.AiAgent]),
        { ...import_descriptions.schemaTypeField, displayOptions: { show: { "@version": [{ _cnd: { gte: 1.2 } }] } } },
        {
          ...import_descriptions.jsonSchemaExampleField,
          default: `{
	"state": "California",
	"cities": ["Los Angeles", "San Francisco", "San Diego"]
}`
        },
        {
          ...import_descriptions.inputSchemaField,
          default: `{
	"type": "object",
	"properties": {
		"state": {
			"type": "string"
		},
		"cities": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	}
}`
        },
        {
          displayName: "JSON Schema",
          name: "jsonSchema",
          type: "json",
          description: "JSON Schema to structure and validate the output against",
          default: `{
  "type": "object",
  "properties": {
    "state": {
      "type": "string"
    },
    "cities": {
      "type": "array",
      "items": {
        "type": "string"
      }
    }
  }
}`,
          typeOptions: {
            rows: 10
          },
          required: true,
          displayOptions: {
            show: {
              "@version": [{ _cnd: { lte: 1.1 } }]
            }
          }
        },
        {
          displayName: 'The schema has to be defined in the <a target="_blank" href="https://json-schema.org/">JSON Schema</a> format. Look at <a target="_blank" href="https://json-schema.org/learn/miscellaneous-examples.html">this</a> page for examples.',
          name: "notice",
          type: "notice",
          default: "",
          displayOptions: {
            hide: {
              schemaType: ["fromJson"]
            }
          }
        }
      ]
    };
  }
  async supplyData(itemIndex) {
    const schemaType = this.getNodeParameter("schemaType", itemIndex, "");
    const jsonExample = this.getNodeParameter("jsonSchemaExample", itemIndex, "");
    let inputSchema;
    if (this.getNode().typeVersion <= 1.1) {
      inputSchema = this.getNodeParameter("jsonSchema", itemIndex, "");
    } else {
      inputSchema = this.getNodeParameter("inputSchema", itemIndex, "");
    }
    const jsonSchema = schemaType === "fromJson" ? (0, import_schemaParsing.generateSchema)(jsonExample) : (0, import_n8n_workflow.jsonParse)(inputSchema);
    const zodSchema = (0, import_schemaParsing.convertJsonSchemaToZod)(jsonSchema);
    const nodeVersion = this.getNode().typeVersion;
    try {
      const parser = await import_N8nOutputParser.N8nStructuredOutputParser.fromZodJsonSchema(
        zodSchema,
        nodeVersion,
        this
      );
      return {
        response: parser
      };
    } catch (error) {
      throw new import_n8n_workflow.NodeOperationError(this.getNode(), "Error during parsing of JSON Schema.");
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  OutputParserStructured
});
//# sourceMappingURL=OutputParserStructured.node.js.map