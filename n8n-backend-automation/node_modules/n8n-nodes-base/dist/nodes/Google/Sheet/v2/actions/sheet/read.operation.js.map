{"version":3,"sources":["../../../../../../../nodes/Google/Sheet/v2/actions/sheet/read.operation.ts"],"sourcesContent":["import type {\n\tIExecuteFunctions,\n\tIDataObject,\n\tINodeExecutionData,\n\tINodeProperties,\n} from 'n8n-workflow';\n\nimport { dataLocationOnSheet, outputFormatting } from './commonDescription';\nimport type { GoogleSheet } from '../../helpers/GoogleSheet';\nimport type {\n\tILookupValues,\n\tRangeDetectionOptions,\n\tSheetProperties,\n\tSheetRangeData,\n\tValueRenderOption,\n} from '../../helpers/GoogleSheets.types';\nimport {\n\tgetRangeString,\n\tprepareSheetData,\n\tuntilSheetSelected,\n} from '../../helpers/GoogleSheets.utils';\n\nconst combineFiltersOptions: INodeProperties = {\n\tdisplayName: 'Combine Filters',\n\tname: 'combineFilters',\n\ttype: 'options',\n\tdescription:\n\t\t'How to combine the conditions defined in \"Filters\": AND requires all conditions to be true, OR requires at least one condition to be true',\n\toptions: [\n\t\t{\n\t\t\tname: 'AND',\n\t\t\tvalue: 'AND',\n\t\t\tdescription: 'Only rows that meet all the conditions are selected',\n\t\t},\n\t\t{\n\t\t\tname: 'OR',\n\t\t\tvalue: 'OR',\n\t\t\tdescription: 'Rows that meet at least one condition are selected',\n\t\t},\n\t],\n\tdefault: 'AND',\n};\n\nexport const description: SheetProperties = [\n\t{\n\t\tdisplayName: 'Filters',\n\t\tname: 'filtersUI',\n\t\tplaceholder: 'Add Filter',\n\t\ttype: 'fixedCollection',\n\t\ttypeOptions: {\n\t\t\tmultipleValueButtonText: 'Add Filter',\n\t\t\tmultipleValues: true,\n\t\t},\n\t\tdefault: {},\n\t\toptions: [\n\t\t\t{\n\t\t\t\tdisplayName: 'Filter',\n\t\t\t\tname: 'values',\n\t\t\t\tvalues: [\n\t\t\t\t\t{\n\t\t\t\t\t\t// eslint-disable-next-line n8n-nodes-base/node-param-display-name-wrong-for-dynamic-options\n\t\t\t\t\t\tdisplayName: 'Column',\n\t\t\t\t\t\tname: 'lookupColumn',\n\t\t\t\t\t\ttype: 'options',\n\t\t\t\t\t\ttypeOptions: {\n\t\t\t\t\t\t\tloadOptionsDependsOn: ['sheetName.value'],\n\t\t\t\t\t\t\tloadOptionsMethod: 'getSheetHeaderRowWithGeneratedColumnNames',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdescription:\n\t\t\t\t\t\t\t'Choose from the list, or specify an ID using an <a href=\"https://docs.n8n.io/code/expressions/\">expression</a>',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tdisplayName: 'Value',\n\t\t\t\t\t\tname: 'lookupValue',\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\thint: 'The column must have this value to be matched',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t],\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['read'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\t...combineFiltersOptions,\n\t\tdefault: 'OR',\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t'@version': [{ _cnd: { lt: 4.3 } }],\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['read'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\t...combineFiltersOptions,\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\t'@version': [{ _cnd: { gte: 4.3 } }],\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['read'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t},\n\t{\n\t\tdisplayName: 'Options',\n\t\tname: 'options',\n\t\ttype: 'collection',\n\t\tplaceholder: 'Add option',\n\t\tdefault: {},\n\t\tdisplayOptions: {\n\t\t\tshow: {\n\t\t\t\tresource: ['sheet'],\n\t\t\t\toperation: ['read'],\n\t\t\t},\n\t\t\thide: {\n\t\t\t\t...untilSheetSelected,\n\t\t\t},\n\t\t},\n\t\toptions: [\n\t\t\tdataLocationOnSheet,\n\t\t\toutputFormatting,\n\t\t\t{\n\t\t\t\tdisplayName: 'Return only First Matching Row',\n\t\t\t\tname: 'returnFirstMatch',\n\t\t\t\ttype: 'boolean',\n\t\t\t\tdefault: false,\n\t\t\t\tdescription:\n\t\t\t\t\t'Whether to select the first row of the sheet or the first matching row (if filters are set)',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [{ _cnd: { gte: 4.5 } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tdisplayName: 'When Filter Has Multiple Matches',\n\t\t\t\tname: 'returnAllMatches',\n\t\t\t\ttype: 'options',\n\t\t\t\tdefault: 'returnFirstMatch',\n\t\t\t\toptions: [\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Return First Match',\n\t\t\t\t\t\tvalue: 'returnFirstMatch',\n\t\t\t\t\t\tdescription: 'Return only the first match',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tname: 'Return All Matches',\n\t\t\t\t\t\tvalue: 'returnAllMatches',\n\t\t\t\t\t\tdescription: 'Return all values that match',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t\tdescription:\n\t\t\t\t\t'By default only the first result gets returned, Set to \"Return All Matches\" to get multiple matches',\n\t\t\t\tdisplayOptions: {\n\t\t\t\t\tshow: {\n\t\t\t\t\t\t'@version': [{ _cnd: { lt: 4.5 } }],\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n];\n\nexport async function execute(\n\tthis: IExecuteFunctions,\n\tsheet: GoogleSheet,\n\tsheetName: string,\n): Promise<INodeExecutionData[]> {\n\tconst items = this.getInputData();\n\tconst nodeVersion = this.getNode().typeVersion;\n\tlet length = 1;\n\n\tif (nodeVersion > 4.1) {\n\t\tlength = items.length;\n\t}\n\n\tconst returnData: INodeExecutionData[] = [];\n\n\tfor (let itemIndex = 0; itemIndex < length; itemIndex++) {\n\t\tconst options = this.getNodeParameter('options', itemIndex, {});\n\t\tconst outputFormattingOption =\n\t\t\t((options.outputFormatting as IDataObject)?.values as IDataObject) || {};\n\n\t\tconst dataLocationOnSheetOptions =\n\t\t\t((options.dataLocationOnSheet as IDataObject)?.values as RangeDetectionOptions) || {};\n\n\t\tif (dataLocationOnSheetOptions.rangeDefinition === undefined) {\n\t\t\tdataLocationOnSheetOptions.rangeDefinition = 'detectAutomatically';\n\t\t}\n\n\t\tconst range = getRangeString(sheetName, dataLocationOnSheetOptions);\n\n\t\tconst valueRenderMode = (outputFormattingOption.general ||\n\t\t\t'UNFORMATTED_VALUE') as ValueRenderOption;\n\t\tconst dateTimeRenderOption = (outputFormattingOption.date || 'FORMATTED_STRING') as string;\n\n\t\tconst sheetData = (await sheet.getData(\n\t\t\trange,\n\t\t\tvalueRenderMode,\n\t\t\tdateTimeRenderOption,\n\t\t)) as SheetRangeData;\n\n\t\tif (sheetData === undefined || sheetData.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst {\n\t\t\tdata,\n\t\t\theaderRow: keyRowIndex,\n\t\t\tfirstDataRow: dataStartRowIndex,\n\t\t} = prepareSheetData(sheetData, dataLocationOnSheetOptions);\n\n\t\tlet responseData = [];\n\n\t\tconst lookupValues = this.getNodeParameter(\n\t\t\t'filtersUI.values',\n\t\t\titemIndex,\n\t\t\t[],\n\t\t) as ILookupValues[];\n\n\t\tconst inputData = data as string[][];\n\n\t\tif (lookupValues.length) {\n\t\t\tlet returnAllMatches;\n\t\t\tif (nodeVersion < 4.5) {\n\t\t\t\treturnAllMatches = options.returnAllMatches === 'returnAllMatches' ? true : false;\n\t\t\t} else {\n\t\t\t\treturnAllMatches = options.returnFirstMatch ? false : true;\n\t\t\t}\n\n\t\t\tif (nodeVersion <= 4.1) {\n\t\t\t\tfor (let i = 1; i < items.length; i++) {\n\t\t\t\t\tconst itemLookupValues = this.getNodeParameter(\n\t\t\t\t\t\t'filtersUI.values',\n\t\t\t\t\t\ti,\n\t\t\t\t\t\t[],\n\t\t\t\t\t) as ILookupValues[];\n\t\t\t\t\tif (itemLookupValues.length) {\n\t\t\t\t\t\tlookupValues.push(...itemLookupValues);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst combineFilters = this.getNodeParameter('combineFilters', itemIndex, 'OR') as\n\t\t\t\t| 'AND'\n\t\t\t\t| 'OR';\n\n\t\t\tresponseData = await sheet.lookupValues({\n\t\t\t\tinputData,\n\t\t\t\tkeyRowIndex,\n\t\t\t\tdataStartRowIndex,\n\t\t\t\tlookupValues,\n\t\t\t\treturnAllMatches,\n\t\t\t\tcombineFilters,\n\t\t\t});\n\t\t} else {\n\t\t\tresponseData = sheet.structureArrayDataByColumn(inputData, keyRowIndex, dataStartRowIndex);\n\t\t}\n\n\t\treturnData.push(\n\t\t\t...responseData.map((item) => {\n\t\t\t\treturn {\n\t\t\t\t\tjson: item,\n\t\t\t\t\tpairedItem: { item: itemIndex },\n\t\t\t\t};\n\t\t\t}),\n\t\t);\n\t}\n\n\treturn returnData;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA,+BAAsD;AAStD,0BAIO;AAEP,MAAM,wBAAyC;AAAA,EAC9C,aAAa;AAAA,EACb,MAAM;AAAA,EACN,MAAM;AAAA,EACN,aACC;AAAA,EACD,SAAS;AAAA,IACR;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,IACd;AAAA,IACA;AAAA,MACC,MAAM;AAAA,MACN,OAAO;AAAA,MACP,aAAa;AAAA,IACd;AAAA,EACD;AAAA,EACA,SAAS;AACV;AAEO,MAAM,cAA+B;AAAA,EAC3C;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM;AAAA,IACN,aAAa;AAAA,MACZ,yBAAyB;AAAA,MACzB,gBAAgB;AAAA,IACjB;AAAA,IACA,SAAS,CAAC;AAAA,IACV,SAAS;AAAA,MACR;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,QAAQ;AAAA,UACP;AAAA;AAAA,YAEC,aAAa;AAAA,YACb,MAAM;AAAA,YACN,MAAM;AAAA,YACN,aAAa;AAAA,cACZ,sBAAsB,CAAC,iBAAiB;AAAA,cACxC,mBAAmB;AAAA,YACpB;AAAA,YACA,SAAS;AAAA,YACT,aACC;AAAA,UACF;AAAA,UACA;AAAA,YACC,aAAa;AAAA,YACb,MAAM;AAAA,YACN,MAAM;AAAA,YACN,SAAS;AAAA,YACT,MAAM;AAAA,UACP;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,IACA,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,OAAO;AAAA,QAClB,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,MACA,MAAM;AAAA,QACL,GAAG;AAAA,MACJ;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,GAAG;AAAA,IACH,SAAS;AAAA,IACT,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,YAAY,CAAC,EAAE,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC;AAAA,QAClC,UAAU,CAAC,OAAO;AAAA,QAClB,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,MACA,MAAM;AAAA,QACL,GAAG;AAAA,MACJ;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,GAAG;AAAA,IACH,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,YAAY,CAAC,EAAE,MAAM,EAAE,KAAK,IAAI,EAAE,CAAC;AAAA,QACnC,UAAU,CAAC,OAAO;AAAA,QAClB,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,MACA,MAAM;AAAA,QACL,GAAG;AAAA,MACJ;AAAA,IACD;AAAA,EACD;AAAA,EACA;AAAA,IACC,aAAa;AAAA,IACb,MAAM;AAAA,IACN,MAAM;AAAA,IACN,aAAa;AAAA,IACb,SAAS,CAAC;AAAA,IACV,gBAAgB;AAAA,MACf,MAAM;AAAA,QACL,UAAU,CAAC,OAAO;AAAA,QAClB,WAAW,CAAC,MAAM;AAAA,MACnB;AAAA,MACA,MAAM;AAAA,QACL,GAAG;AAAA,MACJ;AAAA,IACD;AAAA,IACA,SAAS;AAAA,MACR;AAAA,MACA;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,aACC;AAAA,QACD,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,YAAY,CAAC,EAAE,MAAM,EAAE,KAAK,IAAI,EAAE,CAAC;AAAA,UACpC;AAAA,QACD;AAAA,MACD;AAAA,MACA;AAAA,QACC,aAAa;AAAA,QACb,MAAM;AAAA,QACN,MAAM;AAAA,QACN,SAAS;AAAA,QACT,SAAS;AAAA,UACR;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,UACA;AAAA,YACC,MAAM;AAAA,YACN,OAAO;AAAA,YACP,aAAa;AAAA,UACd;AAAA,QACD;AAAA,QACA,aACC;AAAA,QACD,gBAAgB;AAAA,UACf,MAAM;AAAA,YACL,YAAY,CAAC,EAAE,MAAM,EAAE,IAAI,IAAI,EAAE,CAAC;AAAA,UACnC;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAAA,EACD;AACD;AAEA,eAAsB,QAErB,OACA,WACgC;AAChC,QAAM,QAAQ,KAAK,aAAa;AAChC,QAAM,cAAc,KAAK,QAAQ,EAAE;AACnC,MAAI,SAAS;AAEb,MAAI,cAAc,KAAK;AACtB,aAAS,MAAM;AAAA,EAChB;AAEA,QAAM,aAAmC,CAAC;AAE1C,WAAS,YAAY,GAAG,YAAY,QAAQ,aAAa;AACxD,UAAM,UAAU,KAAK,iBAAiB,WAAW,WAAW,CAAC,CAAC;AAC9D,UAAM,yBACH,QAAQ,kBAAkC,UAA0B,CAAC;AAExE,UAAM,6BACH,QAAQ,qBAAqC,UAAoC,CAAC;AAErF,QAAI,2BAA2B,oBAAoB,QAAW;AAC7D,iCAA2B,kBAAkB;AAAA,IAC9C;AAEA,UAAM,YAAQ,oCAAe,WAAW,0BAA0B;AAElE,UAAM,kBAAmB,uBAAuB,WAC/C;AACD,UAAM,uBAAwB,uBAAuB,QAAQ;AAE7D,UAAM,YAAa,MAAM,MAAM;AAAA,MAC9B;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAEA,QAAI,cAAc,UAAa,UAAU,WAAW,GAAG;AACtD,aAAO,CAAC;AAAA,IACT;AAEA,UAAM;AAAA,MACL;AAAA,MACA,WAAW;AAAA,MACX,cAAc;AAAA,IACf,QAAI,sCAAiB,WAAW,0BAA0B;AAE1D,QAAI,eAAe,CAAC;AAEpB,UAAM,eAAe,KAAK;AAAA,MACzB;AAAA,MACA;AAAA,MACA,CAAC;AAAA,IACF;AAEA,UAAM,YAAY;AAElB,QAAI,aAAa,QAAQ;AACxB,UAAI;AACJ,UAAI,cAAc,KAAK;AACtB,2BAAmB,QAAQ,qBAAqB,qBAAqB,OAAO;AAAA,MAC7E,OAAO;AACN,2BAAmB,QAAQ,mBAAmB,QAAQ;AAAA,MACvD;AAEA,UAAI,eAAe,KAAK;AACvB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACtC,gBAAM,mBAAmB,KAAK;AAAA,YAC7B;AAAA,YACA;AAAA,YACA,CAAC;AAAA,UACF;AACA,cAAI,iBAAiB,QAAQ;AAC5B,yBAAa,KAAK,GAAG,gBAAgB;AAAA,UACtC;AAAA,QACD;AAAA,MACD;AAEA,YAAM,iBAAiB,KAAK,iBAAiB,kBAAkB,WAAW,IAAI;AAI9E,qBAAe,MAAM,MAAM,aAAa;AAAA,QACvC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACD,CAAC;AAAA,IACF,OAAO;AACN,qBAAe,MAAM,2BAA2B,WAAW,aAAa,iBAAiB;AAAA,IAC1F;AAEA,eAAW;AAAA,MACV,GAAG,aAAa,IAAI,CAAC,SAAS;AAC7B,eAAO;AAAA,UACN,MAAM;AAAA,UACN,YAAY,EAAE,MAAM,UAAU;AAAA,QAC/B;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AAEA,SAAO;AACR;","names":[]}